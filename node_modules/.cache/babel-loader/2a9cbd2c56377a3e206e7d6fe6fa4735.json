{"ast":null,"code":"import _regeneratorRuntime from \"/Users/wen/kryptocamp-v3-w4-homework/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/wen/kryptocamp-v3-w4-homework/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"/Users/wen/kryptocamp-v3-w4-homework/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"/Users/wen/kryptocamp-v3-w4-homework/src/contexts/BlockchainContext.jsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { ethers } from \"ethers\";\nimport { getAccount } from \"@wagmi/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport var BlockchainContext = /*#__PURE__*/React.createContext({\n  currentAccount: null,\n  provider: null,\n  chainId: null\n});\n\nvar BlockchainContextProvider = function BlockchainContextProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      currentAccount = _React$useState2[0],\n      setCurrentAccount = _React$useState2[1];\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      provider = _React$useState4[0],\n      setProvider = _React$useState4[1];\n\n  var _React$useState5 = React.useState(null),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      chainId = _React$useState6[0],\n      setChainId = _React$useState6[1];\n\n  React.useEffect(function () {\n    var _window$ethereum;\n\n    /*\n     * 使用 window.ethereum 來透過 Matamask 來取得錢包地址\n     * 參考資料: https://docs.metamask.io/guide/rpc-api.html\n     * 並且將錢包地址設定在上方事先寫好的 currentAccount state\n     * 加分項目1: 使用 window.ethereum 偵測換錢包地址事件，並且切換 currentAccount 值\n     * 加分項目2: 使用 window.ethereum 偵測目前的鏈是否為 Rinkeby，如果不是，則透過 window.ethereum 跳出換鏈提示\n     * 提示: Rinkeby chain ID 為 0x4\n     */\n    var updateCurrentAccounts = function updateCurrentAccounts(accounts) {\n      var _accounts = _slicedToArray(accounts, 1),\n          _account = _accounts[0];\n\n      setCurrentAccount(_account); // _account = \"0x...\"\n    };\n\n    (_window$ethereum = window.ethereum) === null || _window$ethereum === void 0 ? void 0 : _window$ethereum.request({\n      method: \"eth_requestAccounts\"\n    }) // [\"0x...\", ]\n    .then(updateCurrentAccounts); // 加分項目1: 偵測換錢包地址事件\n\n    var changeAccount = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _window$ethereum2, _window$ethereum3;\n\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                (_window$ethereum2 = window.ethereum) === null || _window$ethereum2 === void 0 ? void 0 : _window$ethereum2.request({\n                  method: \"eth_requestAccounts\"\n                }).then(updateCurrentAccounts);\n                (_window$ethereum3 = window.ethereum) === null || _window$ethereum3 === void 0 ? void 0 : _window$ethereum3.on(\"accountsChanged\", updateCurrentAccounts);\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function changeAccount() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    changeAccount(); // 加分項目2: 偵測目前的鏈是否為 Rinkeby，如果不是，則透過 window.ethereum 跳出換鏈提示\n\n    var detectChain = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var _window$ethereum4;\n\n        var networkId;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return (_window$ethereum4 = window.ethereum) === null || _window$ethereum4 === void 0 ? void 0 : _window$ethereum4.networkVersion;\n\n              case 2:\n                networkId = _context2.sent;\n                setChainId(networkId);\n                console.log(networkId);\n\n                if (networkId != '4') {\n                  window.alert(\"請確認metamask鏈是否為Rinkeby\");\n                } else if (networkId == '4') {// window.alert(\"metamask目前鏈為: Rinkeby\");\n                }\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function detectChain() {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n  }, [detectChain()]);\n  React.useEffect(function () {\n    /*\n     * 使用 ethers.js\n     * 透過 Web3Provider 將 window.ethereum 做為參數建立一個新的 web3 provider\n     * 並將這個新的 web3 provider 設定成 provider 的 state\n     */\n    var provider = new ethers.providers.Web3Provider(window.ethereum);\n    setProvider(provider);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(BlockchainContext.Provider, {\n    value: {\n      currentAccount: currentAccount,\n      provider: provider,\n      chainId: chainId\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(BlockchainContextProvider, \"eNC6/F0KmWJ73WKTsdPDIZ3kAHg=\");\n\n_c = BlockchainContextProvider;\nexport default BlockchainContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"BlockchainContextProvider\");","map":{"version":3,"names":["React","ethers","getAccount","BlockchainContext","createContext","currentAccount","provider","chainId","BlockchainContextProvider","children","useState","setCurrentAccount","setProvider","setChainId","useEffect","updateCurrentAccounts","accounts","_account","window","ethereum","request","method","then","changeAccount","on","detectChain","networkVersion","networkId","console","log","alert","providers","Web3Provider"],"sources":["/Users/wen/kryptocamp-v3-w4-homework/src/contexts/BlockchainContext.jsx"],"sourcesContent":["import React from \"react\";\nimport { ethers } from \"ethers\";\nimport { getAccount } from \"@wagmi/core\";\n\nexport const BlockchainContext = React.createContext({\n  currentAccount: null,\n  provider: null,\n  chainId: null\n});\n\nconst BlockchainContextProvider = ({ children }) => {\n  const [currentAccount, setCurrentAccount] = React.useState(null);\n  const [provider, setProvider] = React.useState(null);\n\n  const [chainId, setChainId] = React.useState(null);\n\n  React.useEffect(() => {\n    /*\n     * 使用 window.ethereum 來透過 Matamask 來取得錢包地址\n     * 參考資料: https://docs.metamask.io/guide/rpc-api.html\n     * 並且將錢包地址設定在上方事先寫好的 currentAccount state\n     * 加分項目1: 使用 window.ethereum 偵測換錢包地址事件，並且切換 currentAccount 值\n     * 加分項目2: 使用 window.ethereum 偵測目前的鏈是否為 Rinkeby，如果不是，則透過 window.ethereum 跳出換鏈提示\n     * 提示: Rinkeby chain ID 為 0x4\n     */\n\n    const updateCurrentAccounts = (accounts) => {\n      const [_account] = accounts;\n      setCurrentAccount(_account); // _account = \"0x...\"\n    }\n\n    window.ethereum\n    ?.request({ method: \"eth_requestAccounts\" }) // [\"0x...\", ]\n    .then(updateCurrentAccounts);\n\n\n    // 加分項目1: 偵測換錢包地址事件\n    const changeAccount = async () => {\n      window.ethereum\n        ?.request({ method: \"eth_requestAccounts\" })\n        .then(updateCurrentAccounts);\n      window.ethereum?.on(\"accountsChanged\", updateCurrentAccounts);\n    };\n\n    changeAccount();\n\n    // 加分項目2: 偵測目前的鏈是否為 Rinkeby，如果不是，則透過 window.ethereum 跳出換鏈提示\n    const detectChain = async () => {\n      const networkId = await window.ethereum?.networkVersion;\n      setChainId(networkId);\n\n      console.log(networkId);\n      if (networkId != '4') {\n        window.alert(\"請確認metamask鏈是否為Rinkeby\");\n      }\n      else if (networkId == '4') {\n        // window.alert(\"metamask目前鏈為: Rinkeby\");\n      }\n    };\n\n    \n    \n  }, [detectChain()]);\n\n\n\n  \n\n  React.useEffect(() => {\n    /*\n     * 使用 ethers.js\n     * 透過 Web3Provider 將 window.ethereum 做為參數建立一個新的 web3 provider\n     * 並將這個新的 web3 provider 設定成 provider 的 state\n     */\n\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    setProvider(provider)\n  }, []);\n\n  return (\n    <BlockchainContext.Provider value={{ currentAccount, provider, chainId }}>\n      {children}\n    </BlockchainContext.Provider>\n  );\n};\n\nexport default BlockchainContextProvider;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}