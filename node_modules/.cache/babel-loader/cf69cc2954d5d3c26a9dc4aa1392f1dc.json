{"ast":null,"code":"import _slicedToArray from \"/Users/wen/kryptocamp-v3-w4-homework/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"/Users/wen/kryptocamp-v3-w4-homework/src/pages/ERC721Assignment.jsx\",\n    _this = this,\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useContext, useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport Layout from \"../components/Layout\";\nimport { BlockchainContext } from \"../contexts/BlockchainContext\"; // 請至 Rinkeby Etherscan 找到合約 ABI\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar contractAddress = \"0x388256be6bdce27de101d592859a7205e58d0074\";\nvar contractABI = [];\n\nvar ERC721Assignment = function ERC721Assignment() {\n  _s();\n\n  var _useContext = useContext(BlockchainContext),\n      currentAccount = _useContext.currentAccount,\n      provider = _useContext.provider;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      contract = _useState2[0],\n      setContract = _useState2[1];\n\n  useEffect(function () {\n    /*\n     * 請透過 ethers.js 透過 provider, contractAddress 以及 contractABI 建立 Contract 物件\n     * 並將建立好的 Contract 設定在上方事先寫好的 contract state\n     * 注意: 為了確保底下呼叫智能合約方法可以順利進行，請先透過 provider\n     * 1. 取得 signer，將建立好的 Contract 物件透過 connect 方法連結 signer\n     * 2. 取得目前 block (區塊) 中的 gas fee，並在建立 Contract 物件的時候帶入 gasLimit 參數\n     * 參考資料: https://docs.ethers.io/v5/getting-started/#getting-started--contracts\n     */\n  }, []);\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      totalSupply = _useState4[0],\n      setTotalSupply = _useState4[1];\n\n  useEffect(function () {\n    /*\n     * 請在此處判斷:\n     * 當 contract state 有物件之後，透過 contract state，跟智能合約取得 totalSupply 的值\n     * 並且儲存上方的 totalSupply state 中\n     * 如果寫成功，則 <div>目前 Mint 數量: {totalSupply}</div> 處就會顯示 totalSupply 的數值\n     * 提示: 透過 ethers.js 取得的 counter 數值為 bigNumber，請想辦法轉換成數字或是字串\n     */\n  }, []);\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      mintPrice = _useState6[0],\n      setPrice = _useState6[1];\n\n  useEffect(function () {\n    /*\n     * 請在此處判斷:\n     * 當 contract state 有物件之後，透過 contract state，跟智能合約取得 mintPrice 的值\n     * 並且儲存上方的 mintPrice state 中\n     * 如果寫成功，則 <div>Mint 價格: {totalSupply} ETH</div> 處就會顯示 mint 的價格\n     * 提示:\n     * 1. 透過 ethers.js 取得的 mintPrice 數值為 bigNumber\n     * 2. mintPrice 為 0.01 ether，由於 ether 的數值在智能合約是用 wei 來儲存，會是一個非常大的數字，無法用 js Number 來顯示，\n     *    建議透過 ethers.utils.formatEther 來轉換 (會轉換為字串)\n     */\n  }, []);\n\n  var _useState7 = useState(),\n      _useState8 = _slicedToArray(_useState7, 2),\n      accountBalance = _useState8[0],\n      setAccountBalance = _useState8[1];\n\n  useEffect(function () {\n    /*\n     * 請在此處判斷:\n     * 當 contract state 有物件之後，透過 contract state，跟智能合約取得 balanceOf 的值\n     * 並帶入 currentAccount 做為參數\n     * 儲存於上方的 accountBalance state 中\n     * 如果寫成功，則 <div>我的錢包有的數量: {accountBalance}</div> 處就會顯示 accountBalance 的數值\n     * 提示: 透過 ethers.js 取得的 counter 數值為 bigNumber，請想辦法轉換成數字或是字串\n     */\n  }, []);\n\n  var onMint = function onMint() {\n    /*\n     * 請在此處透過 contract 物件，向智能合約呼叫 mint 方法\n     * 並且將目前錢包地址帶入\n     * 1. from 參數: 目前錢包地址\n     * 2. value 參數: mint 所需價錢，請判斷 mintPrice 有值之後再帶入，由於 mintPrice 格式為字串，\n     *    建議透過 ethers.utils.formatEther 轉換為 gwei\n     * 如果寫成功，則點擊 Mint 按鈕時，狐狸錢包會跳出交易資訊\n     */\n  };\n\n  useEffect(function () {\n    /*\n     * 加分項目:\n     * 請透過 window.setInterval 自動透過 contract 物件每一秒鐘自動取得 totalSupply 以及 balanceOf 的數值\n     * 並且儲存上方的 totalSupply state 以及 accountBalance state 中\n     * 如果寫成功，則點擊 Mint 按鈕時成功後過數秒鐘後，totalSupply 以及 accountBalance 數值會產生變化\n     * 注意: 由於開發時頁面會重新刷新，會導致 setInterval 無法清除，因此請透過 useEffect 中的 return 清除 setInterval\n     * 參考資料: https://developer.mozilla.org/zh-TW/docs/Web/API/setInterval\n     */\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u57FA\\u790E\\u4F5C\\u696D: Counter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"\\u93C8\\u4E0A\\u8CC7\\u6599:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"my-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-1\",\n          children: [\"\\u76EE\\u524D\\u7E3D Mint \\u6578\\u91CF: \", totalSupply]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-1\",\n          children: [\"\\u6211\\u7684\\u9322\\u5305\\u6709\\u7684\\u6578\\u91CF: \", accountBalance]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-1\",\n          children: [\"Mint \\u50F9\\u683C: \", mintPrice, \" ETH\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onMint,\n          children: \"Mint\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"\\u6301\\u6709\\u8005\\u5217\\u8868:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(\"ul\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(ERC721Assignment, \"YUibLlBy0IBQlwUazGS2jVOxGjQ=\");\n\n_c = ERC721Assignment;\n\nvar OwnerListItem = function OwnerListItem(_ref) {\n  _s2();\n\n  var tokenId = _ref.tokenId,\n      contract = _ref.contract;\n\n  var _useContext2 = useContext(BlockchainContext),\n      currentAccount = _useContext2.currentAccount,\n      provider = _useContext2.provider;\n\n  var _useState9 = useState(),\n      _useState10 = _slicedToArray(_useState9, 2),\n      ownerAddress = _useState10[0],\n      setOwnerAddress = _useState10[1];\n\n  useEffect(function () {\n    /*\n     * 請在此處判斷:\n     * 透過 contract 參數，跟智能合約取得 ownerOf 的值\n     * 並且帶入 tokenId 作為參數\n     * 並且儲存上方的 ownerAddress state 中\n     * 如果寫成功，則 {ownerAddress} 處就會顯示 ownerAddress 的數值\n     */\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    children: [\"Token \", tokenId, \" \\u64C1\\u6709\\u8005 \", ownerAddress]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, _this);\n};\n\n_s2(OwnerListItem, \"TlPdqx93oDu/7X8IZpTJmlq+ct8=\");\n\n_c2 = OwnerListItem;\nexport default ERC721Assignment;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ERC721Assignment\");\n$RefreshReg$(_c2, \"OwnerListItem\");","map":{"version":3,"names":["useContext","useState","useEffect","ethers","Layout","BlockchainContext","contractAddress","contractABI","ERC721Assignment","currentAccount","provider","contract","setContract","totalSupply","setTotalSupply","mintPrice","setPrice","accountBalance","setAccountBalance","onMint","OwnerListItem","tokenId","ownerAddress","setOwnerAddress"],"sources":["/Users/wen/kryptocamp-v3-w4-homework/src/pages/ERC721Assignment.jsx"],"sourcesContent":["import { useContext, useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport Layout from \"../components/Layout\";\nimport { BlockchainContext } from \"../contexts/BlockchainContext\";\n\n// 請至 Rinkeby Etherscan 找到合約 ABI\nconst contractAddress = \"0x388256be6bdce27de101d592859a7205e58d0074\";\nconst contractABI = [];\n\nconst ERC721Assignment = () => {\n  const { currentAccount, provider } = useContext(BlockchainContext);\n  const [contract, setContract] = useState();\n  useEffect(() => {\n    /*\n     * 請透過 ethers.js 透過 provider, contractAddress 以及 contractABI 建立 Contract 物件\n     * 並將建立好的 Contract 設定在上方事先寫好的 contract state\n     * 注意: 為了確保底下呼叫智能合約方法可以順利進行，請先透過 provider\n     * 1. 取得 signer，將建立好的 Contract 物件透過 connect 方法連結 signer\n     * 2. 取得目前 block (區塊) 中的 gas fee，並在建立 Contract 物件的時候帶入 gasLimit 參數\n     * 參考資料: https://docs.ethers.io/v5/getting-started/#getting-started--contracts\n     */\n  }, []);\n\n  const [totalSupply, setTotalSupply] = useState();\n  useEffect(() => {\n    /*\n     * 請在此處判斷:\n     * 當 contract state 有物件之後，透過 contract state，跟智能合約取得 totalSupply 的值\n     * 並且儲存上方的 totalSupply state 中\n     * 如果寫成功，則 <div>目前 Mint 數量: {totalSupply}</div> 處就會顯示 totalSupply 的數值\n     * 提示: 透過 ethers.js 取得的 counter 數值為 bigNumber，請想辦法轉換成數字或是字串\n     */\n  }, []);\n\n  const [mintPrice, setPrice] = useState();\n  useEffect(() => {\n    /*\n     * 請在此處判斷:\n     * 當 contract state 有物件之後，透過 contract state，跟智能合約取得 mintPrice 的值\n     * 並且儲存上方的 mintPrice state 中\n     * 如果寫成功，則 <div>Mint 價格: {totalSupply} ETH</div> 處就會顯示 mint 的價格\n     * 提示:\n     * 1. 透過 ethers.js 取得的 mintPrice 數值為 bigNumber\n     * 2. mintPrice 為 0.01 ether，由於 ether 的數值在智能合約是用 wei 來儲存，會是一個非常大的數字，無法用 js Number 來顯示，\n     *    建議透過 ethers.utils.formatEther 來轉換 (會轉換為字串)\n     */\n  }, []);\n\n  const [accountBalance, setAccountBalance] = useState();\n  useEffect(() => {\n    /*\n     * 請在此處判斷:\n     * 當 contract state 有物件之後，透過 contract state，跟智能合約取得 balanceOf 的值\n     * 並帶入 currentAccount 做為參數\n     * 儲存於上方的 accountBalance state 中\n     * 如果寫成功，則 <div>我的錢包有的數量: {accountBalance}</div> 處就會顯示 accountBalance 的數值\n     * 提示: 透過 ethers.js 取得的 counter 數值為 bigNumber，請想辦法轉換成數字或是字串\n     */\n  }, []);\n\n  const onMint = () => {\n    /*\n     * 請在此處透過 contract 物件，向智能合約呼叫 mint 方法\n     * 並且將目前錢包地址帶入\n     * 1. from 參數: 目前錢包地址\n     * 2. value 參數: mint 所需價錢，請判斷 mintPrice 有值之後再帶入，由於 mintPrice 格式為字串，\n     *    建議透過 ethers.utils.formatEther 轉換為 gwei\n     * 如果寫成功，則點擊 Mint 按鈕時，狐狸錢包會跳出交易資訊\n     */\n  };\n\n  useEffect(() => {\n    /*\n     * 加分項目:\n     * 請透過 window.setInterval 自動透過 contract 物件每一秒鐘自動取得 totalSupply 以及 balanceOf 的數值\n     * 並且儲存上方的 totalSupply state 以及 accountBalance state 中\n     * 如果寫成功，則點擊 Mint 按鈕時成功後過數秒鐘後，totalSupply 以及 accountBalance 數值會產生變化\n     * 注意: 由於開發時頁面會重新刷新，會導致 setInterval 無法清除，因此請透過 useEffect 中的 return 清除 setInterval\n     * 參考資料: https://developer.mozilla.org/zh-TW/docs/Web/API/setInterval\n     */\n  }, []);\n\n  return (\n    <Layout>\n      <h1>基礎作業: Counter</h1>\n\n      <div>\n        <div>鏈上資料:</div>\n        <div className=\"my-3\">\n          <div className=\"mb-1\">目前總 Mint 數量: {totalSupply}</div>\n          <div className=\"mb-1\">我的錢包有的數量: {accountBalance}</div>\n          <div className=\"mb-1\">Mint 價格: {mintPrice} ETH</div>\n          <button onClick={onMint}>Mint</button>\n        </div>\n\n        <div>\n          <div>持有者列表:</div>\n          <ul>\n            {/* \n                請在這裡透過 [...new Array(totalSupply)]，\n                來透過 map 迭代，\n                顯示 OwnerListItem Component，\n                並藉由 map 中的 index 參數，\n                將 index 帶入 OwnerListItem Component 的 tokenId 參數以及 contract 物件\n                由於是 map 列表，請帶入 key\n                注意: 由於 totalSupply 可能為 undefined，請善用 JSX 中的 condition (if / else)\n                參考資料1: https://stackoverflow.com/questions/47287177/how-to-loop-over-a-number-in-react-inside-jsx\n                參考資料2: https://zh-hant.reactjs.org/docs/lists-and-keys.html\n             */}\n          </ul>\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nconst OwnerListItem = ({ tokenId, contract }) => {\n  const { currentAccount, provider } = useContext(BlockchainContext);\n\n  const [ownerAddress, setOwnerAddress] = useState();\n  useEffect(() => {\n    /*\n     * 請在此處判斷:\n     * 透過 contract 參數，跟智能合約取得 ownerOf 的值\n     * 並且帶入 tokenId 作為參數\n     * 並且儲存上方的 ownerAddress state 中\n     * 如果寫成功，則 {ownerAddress} 處就會顯示 ownerAddress 的數值\n     */\n  }, []);\n\n  return (\n    <li>\n      Token {tokenId} 擁有者 {ownerAddress}\n    </li>\n  );\n};\n\nexport default ERC721Assignment;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}