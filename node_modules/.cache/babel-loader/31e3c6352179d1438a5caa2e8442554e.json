{"ast":null,"code":"import _slicedToArray from \"/Users/wen/kryptocamp-v3-w4-homework/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"/Users/wen/kryptocamp-v3-w4-homework/src/contexts/BlockchainContext.jsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { ethers } from \"ethers\";\nimport { getAccount } from \"@wagmi/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport var BlockchainContext = /*#__PURE__*/React.createContext({\n  currentAccount: null,\n  provider: null\n});\n\nvar BlockchainContextProvider = function BlockchainContextProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      currentAccount = _React$useState2[0],\n      setCurrentAccount = _React$useState2[1];\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      provider = _React$useState4[0],\n      setProvider = _React$useState4[1];\n\n  var _React$useState5 = React.useState(),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      chainId = _React$useState6[0],\n      setChainId = _React$useState6[1];\n\n  React.useEffect(function () {\n    /*\n     * 使用 window.ethereum 來透過 Matamask 來取得錢包地址\n     * 參考資料: https://docs.metamask.io/guide/rpc-api.html\n     * 並且將錢包地址設定在上方事先寫好的 currentAccount state\n     * 加分項目1: 使用 window.ethereum 偵測換錢包地址事件，並且切換 currentAccount 值\n     * 加分項目2: 使用 window.ethereum 偵測目前的鏈是否為 Rinkeby，如果不是，則透過 window.ethereum 跳出換鏈提示\n     * 提示: Rinkeby chain ID 為 0x4\n     */\n    setChainId(7);\n  }, []); //基本1\n\n  var updateCurrentAccounts = function updateCurrentAccounts(accounts) {\n    var _accounts = _slicedToArray(accounts, 1),\n        _account = _accounts[0];\n\n    setCurrentAccount(_account); // _account = \"0x...\"\n  };\n\n  window.ethereum.request({\n    method: \"eth_requestAccounts\"\n  }) // [\"0x...\", ]\n  .then(updateCurrentAccounts);\n  React.useEffect(function () {\n    /*\n     * 使用 ethers.js\n     * 透過 Web3Provider 將 window.ethereum 做為參數建立一個新的 web3 provider\n     * 並將這個新的 web3 provider 設定成 provider 的 state\n     */\n  }, []);\n  return /*#__PURE__*/_jsxDEV(BlockchainContext.Provider, {\n    value: {\n      currentAccount: currentAccount,\n      provider: provider,\n      chainId: chainId\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(BlockchainContextProvider, \"cQ5rLeU0QjXwCmNW+ntrscYHo44=\");\n\n_c = BlockchainContextProvider;\nexport default BlockchainContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"BlockchainContextProvider\");","map":{"version":3,"names":["React","ethers","getAccount","BlockchainContext","createContext","currentAccount","provider","BlockchainContextProvider","children","useState","setCurrentAccount","setProvider","chainId","setChainId","useEffect","updateCurrentAccounts","accounts","_account","window","ethereum","request","method","then"],"sources":["/Users/wen/kryptocamp-v3-w4-homework/src/contexts/BlockchainContext.jsx"],"sourcesContent":["import React from \"react\";\nimport { ethers } from \"ethers\";\nimport { getAccount } from \"@wagmi/core\";\n\nexport const BlockchainContext = React.createContext({\n  currentAccount: null,\n  provider: null\n});\n\nconst BlockchainContextProvider = ({ children }) => {\n  const [currentAccount, setCurrentAccount] = React.useState(null);\n  const [provider, setProvider] = React.useState(null);\n  const [chainId, setChainId] = React.useState();\n\n  React.useEffect(() => {\n    /*\n     * 使用 window.ethereum 來透過 Matamask 來取得錢包地址\n     * 參考資料: https://docs.metamask.io/guide/rpc-api.html\n     * 並且將錢包地址設定在上方事先寫好的 currentAccount state\n     * 加分項目1: 使用 window.ethereum 偵測換錢包地址事件，並且切換 currentAccount 值\n     * 加分項目2: 使用 window.ethereum 偵測目前的鏈是否為 Rinkeby，如果不是，則透過 window.ethereum 跳出換鏈提示\n     * 提示: Rinkeby chain ID 為 0x4\n     */\n\n    setChainId(7)\n  }, []);\n\n  //基本1\n  const updateCurrentAccounts = (accounts) => {\n    const [_account] = accounts;\n    setCurrentAccount(_account); // _account = \"0x...\"\n  }\n\n  window.ethereum\n  .request({ method: \"eth_requestAccounts\" }) // [\"0x...\", ]\n  .then(updateCurrentAccounts);\n\n  \n\n  React.useEffect(() => {\n    /*\n     * 使用 ethers.js\n     * 透過 Web3Provider 將 window.ethereum 做為參數建立一個新的 web3 provider\n     * 並將這個新的 web3 provider 設定成 provider 的 state\n     */\n  }, []);\n\n  return (\n    <BlockchainContext.Provider value={{ currentAccount, provider,chainId }}>\n      {children}\n    </BlockchainContext.Provider>\n  );\n};\n\nexport default BlockchainContextProvider;\n"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,UAAT,QAA2B,aAA3B;;AAEA,OAAO,IAAMC,iBAAiB,gBAAGH,KAAK,CAACI,aAAN,CAAoB;EACnDC,cAAc,EAAE,IADmC;EAEnDC,QAAQ,EAAE;AAFyC,CAApB,CAA1B;;AAKP,IAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B,OAAkB;EAAA;;EAAA,IAAfC,QAAe,QAAfA,QAAe;;EAClD,sBAA4CR,KAAK,CAACS,QAAN,CAAe,IAAf,CAA5C;EAAA;EAAA,IAAOJ,cAAP;EAAA,IAAuBK,iBAAvB;;EACA,uBAAgCV,KAAK,CAACS,QAAN,CAAe,IAAf,CAAhC;EAAA;EAAA,IAAOH,QAAP;EAAA,IAAiBK,WAAjB;;EACA,uBAA8BX,KAAK,CAACS,QAAN,EAA9B;EAAA;EAAA,IAAOG,OAAP;EAAA,IAAgBC,UAAhB;;EAEAb,KAAK,CAACc,SAAN,CAAgB,YAAM;IACpB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;IAEID,UAAU,CAAC,CAAD,CAAV;EACD,CAXD,EAWG,EAXH,EALkD,CAkBlD;;EACA,IAAME,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,QAAD,EAAc;IAC1C,+BAAmBA,QAAnB;IAAA,IAAOC,QAAP;;IACAP,iBAAiB,CAACO,QAAD,CAAjB,CAF0C,CAEb;EAC9B,CAHD;;EAKAC,MAAM,CAACC,QAAP,CACCC,OADD,CACS;IAAEC,MAAM,EAAE;EAAV,CADT,EAC4C;EAD5C,CAECC,IAFD,CAEMP,qBAFN;EAMAf,KAAK,CAACc,SAAN,CAAgB,YAAM;IACpB;AACJ;AACA;AACA;AACA;EACG,CAND,EAMG,EANH;EAQA,oBACE,QAAC,iBAAD,CAAmB,QAAnB;IAA4B,KAAK,EAAE;MAAET,cAAc,EAAdA,cAAF;MAAkBC,QAAQ,EAARA,QAAlB;MAA2BM,OAAO,EAAPA;IAA3B,CAAnC;IAAA,UACGJ;EADH;IAAA;IAAA;IAAA;EAAA,SADF;AAKD,CA3CD;;GAAMD,yB;;KAAAA,yB;AA6CN,eAAeA,yBAAf"},"metadata":{},"sourceType":"module"}